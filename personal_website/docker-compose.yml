version: '3.8'

services:
  web:
    build: .
    container_name: personal_website_web
    restart: always
    volumes:
      - .:/app
      - static_volume:/app/frontend/static
    ports:
      - "5000:5000"
    environment:
      - FLASK_APP=backend/app.py
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/personal_website
      - SECRET_KEY=${SECRET_KEY:-my-secure-secret-key}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-my-jwt-secret-key}
    depends_on:
      - db
    networks:
      - app_network

  db:
    image: postgres:14-alpine
    container_name: personal_website_db
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=personal_website
    ports:
      - "5432:5432"
    networks:
      - app_network

  pgadmin:
    image: dpage/pgadmin4
    container_name: personal_website_pgadmin
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - app_network

  # Production setup with Nginx (commented out for development)
  # nginx:
  #   image: nginx:alpine
  #   container_name: personal_website_nginx
  #   restart: always
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
  #     - ./frontend/static:/app/static
  #     - ./certbot/conf:/etc/letsencrypt
  #     - ./certbot/www:/var/www/certbot
  #   depends_on:
  #     - web
  #   networks:
  #     - app_network

  # certbot:
  #   image: certbot/certbot
  #   container_name: personal_website_certbot
  #   volumes:
  #     - ./certbot/conf:/etc/letsencrypt
  #     - ./certbot/www:/var/www/certbot
  #   entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
  #   networks:
  #     - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  static_volume: